package rb.compiler;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.FileReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.List;

import me.qmx.jitescript.JiteClass;
import rb.compiler.Parser.Syntax;
import rb.compiler.Tokenizer.Token;

public class Main {
	private static final boolean INTERPRET = true;
	
	public static void main(String[] args) {
		String src = loadFile("src/main.sn");
		
		List<Token> tokens = new ArrayList<Token>();
		Lexer.run(src, tokens);
		printTokens(tokens);
		
		Syntax syntax = new Syntax();
		syntax.name = "main";
		Parser.run(tokens, syntax);
		
		JiteClass unit = Builder.run(syntax);
		
		if (INTERPRET) {
			interpretUnit(unit);
		} else {
			compileUnit(unit);
		}
		
		try {
			byte[] bytes = unit.toBytes();
			FileOutputStream out = new FileOutputStream(syntax.name + ".class");
			out.write(bytes);
			out.close();
		} catch (FileNotFoundException e) {
			e.printStackTrace();
		} catch (IOException e) {
			e.printStackTrace();
		}
		
		runCommand("java -cp D:/Projects/jsneklang " + "main");
	}
	
	private static void interpretUnit(JiteClass unit) {
		byte[] bytes = unit.toBytes();
		Class<?> c = new ClassLoader() {
			Class<?> define(byte[] bytes) {
				return defineClass(unit.getClassName(), bytes, 0, bytes.length);
			}
		}.define(bytes);
		c.getMethod("main", String[].class).invoke(null);
	}
	
	private static void runCommand(String cmd) {
		try {
			Runtime r = Runtime.getRuntime();
			Process p = r.exec(cmd);
			p.waitFor();
			
			BufferedReader result = new BufferedReader(new InputStreamReader(p.getInputStream()));
			String line = null;
			while ((line = result.readLine()) != null) {
				System.out.println(line);
			}
			result.close();
		} catch (IOException e) {
			e.printStackTrace();
		} catch (InterruptedException e) {
			e.printStackTrace();
		}
	}
	
	private static void printTokens(List<Token> tokens) {
		System.out.println("\n######## TOKEN STREAM ########\n\n");
		for (Token token : tokens) {
			String type = Lexer.getTypeStr(token.type);
			String empty = "";
			for (int i = 0; i < 20 - type.length(); i++) {
				empty += " ";
			}
			System.out.println(type + ":" + empty + token.val);
		}
	}
	
	private static String loadFile(String path) {
		try {
			BufferedReader reader = new BufferedReader(new FileReader(new File(path)));
			StringBuilder result = new StringBuilder();
			String line = null;
			while ((line = reader.readLine()) != null) {
				result.append(line).append("\n");
			}
			reader.close();
			return result.toString();
		} catch (FileNotFoundException e) {
			e.printStackTrace();
		} catch (IOException e) {
			e.printStackTrace();
		}
		return null;
	}
}
